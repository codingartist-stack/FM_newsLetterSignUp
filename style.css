:root {
  --clr-primary600: hsl(4, 100%, 67%);
  --clr-primaryLowOpacity: hsl(4, 100%, 67%, 0.2);
  --clr-neutral100: hsl(0, 0%, 100%);
  --clr-neutral400: hsl(231, 7%, 60%);
  --clr-neutral700: hsl(235, 18%, 26%);
  --clr-neutral800: hsl(234, 29%, 20%);

  --fontFamilyReg: 'RobotoRegular', sans-serif;
  --fontFamilyBold: 'RobotoBold', sans-serif;

  --fontWeight400: 400;
  --fontWeight700: 700;
}

@font-face {
  font-family: 'RobotoRegular';
  src: url(assets/fonts/Roboto-Regular.ttf);
}

@font-face {
  font-family: 'RobotoBold';
  src: url(assets/fonts/Roboto-Bold.ttf);
}

/*
  1. Use a more-intuitive box-sizing model.
*/
*,
*::before,
*::after {
  box-sizing: border-box;
}
/*
  2. Remove default margin
*/
* {
  margin: 0;
}
/*
  Typographic tweaks!
  3. Add accessible line-height
  4. Improve text rendering
*/
body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
}
/*
  5. Improve media defaults
*/
img,
picture,
video,
canvas,
svg {
  display: block;
  max-width: 100%;
}
/*
  6. Remove built-in form typography styles
*/
input,
button,
textarea,
select {
  font: inherit;
}
/*
  7. Avoid text overflows
*/
p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}
/*
  8. Create a root stacking context
*/
#root,
#__next {
  isolation: isolate;
}

body {
  font-family: var(--fontFamilyReg);
}

article {
  padding: 1.5rem;
}

h1 {
  /* font-weight: var(--fontWeight700); */
  font-family: var(--fontFamilyBold);
  font-size: 2.5rem;
  line-height: 2.75rem;
}

ul,
li {
  margin-left: 0;
  padding-left: 0;
}

ul {
  list-style-type: none;
  display: grid;
  gap: 0.5rem;
}

li {
  display: flex;
  gap: 1rem;
  align-items: start;
}

label,
.flexGroup p {
  font-family: var(--fontFamilyBold);
  font-size: 0.75rem;
}

input,
button {
  padding: 1rem 2rem;
  border-radius: 10px;
}

button {
  background-color: var(--clr-neutral800);
  color: var(--clr-neutral100);
  font-family: var(--fontFamilyBold);
  border: none;
}

button:hover {
  background: rgb(255, 102, 102);
  background: linear-gradient(
    40deg,
    rgba(255, 102, 102, 1) 28%,
    rgba(255, 139, 0, 1) 100%
  );
}

.invalid {
  color: var(--clr-primary600);
  border: solid var(--clr-primary600);
  background-color: var(--clr-primaryLowOpacity);
}

.error {
  color: var(--clr-primary600);
}

.mainFlex {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

@media screen and (min-width: 49rem) {
  body {
    background-color: var(--clr-neutral800);
  }
  .mainFlex {
    /* flex-direction: row; */
    justify-content: center;
    align-content: center;
  }
  .subscriptionContainer,
  .thanksPopUp {
    align-self: center;
    display: flex;
    flex-direction: row-reverse;
    background-color: var(--clr-neutral100);
    border-radius: 10px;

    padding: 1.5rem;
    max-width: 49rem;
  }
}

.gridGroup {
  display: grid;
  gap: 1.5rem;
  color: var(--clr-neutral800);
}

.flexGroup {
  display: flex;
  justify-content: space-between;
}

.inputGrid {
  display: grid;
  gap: 0.25rem;
}

.thanksPopUp {
  display: grid;
  gap: 1.5rem;
  height: 100%;
  align-items: end;
}

.thanksPopUp div {
  align-self: center;
}

@media screen and (min-width: 49rem) {
  .thanksPopUp {
    height: max-content;
    width: 400px;
  }

  .gridGroup {
    align-content: center;
  }
}

.hidden {
  display: none;
}
